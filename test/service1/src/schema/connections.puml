@startuml
component mainController as mainController
component coreService as coreService
component jmsQueueListener as jmsQueueListener
component jmsQueueService as jmsQueueService
component service2LegacyImpl as service2LegacyImpl
component service2StreamClientImpl as service2StreamClientImpl
component standaloneService2Api as standaloneService2Api
component eventsHandler as eventsHandler
component service2FeignClient as service2FeignClient
component simpleEntityRepository as simpleEntityRepository
component userRepository as userRepository
component documentRepository as documentRepository
mainController ..> coreService
coreService ..> service2FeignClient
coreService ..> service2LegacyImpl
coreService ..> standaloneService2Api
coreService ..> simpleEntityRepository
coreService ..> documentRepository
jmsQueueListener ..> coreService
cloud "internal" as internal #line.dotted;line:gray; {
  database "storage" as internal.storage {
    collections "service1.db.jpa.model.SimpleEntity\n\
service1.db.jpa.model.UserEntity\n\
service1.db.mongo.model.DocumentEntity" as internal.storage.interfaces
    internal.storage.interfaces .. simpleEntityRepository
    internal.storage.interfaces .. userRepository
    internal.storage.interfaces .. documentRepository
  }
}
cloud "input" as input #line.dotted;line:gray; {
  rectangle "http" as input.http {
    frame "/api/v1" #line.dotted;text:gray {
      interface "*:/" as in....api.v1.
      in....api.v1. )..> mainController
      interface "GET:/req" as in.GET..api.v1.req
      in.GET..api.v1.req )..> mainController
    }
  }
  rectangle "web socket" as input.websocket {
    interface "/events" as in
    in )..> eventsHandler
  }
  queue "jms" as input.jms {
    interface "default" as in.default.in
    in.default.in )..> jmsQueueService
    frame "jmsQueueListener" as input.jms.jms.jmsQueueListener #line.dotted;text:gray {
      interface "queue1" as in.queue1.in
      in.queue1.in )..> jmsQueueListener
      interface "queue2" as in.queue2.in
      in.queue2.in )..> jmsQueueListener
    }
  }
}
cloud "output" as output #line.dotted;line:gray; {
  rectangle "http" as output.http {
    interface "GET:standalone-service2/{id}" as out.GET.standalone.service2..id.
    standaloneService2Api ..( out.GET.standalone.service2..id.
    frame "http://service2" #line.dotted;text:gray {
      interface "GET:/{id}" as out.GET.http...service2..id.
      service2LegacyImpl ..( out.GET.http...service2..id.
      service2FeignClient ..( out.GET.http...service2..id.
      interface "GET:" as out.GET.http...service2
      service2LegacyImpl ..( out.GET.http...service2
    }
  }
  rectangle "web socket" as output.websocket {
    frame "service2StreamClientImpl" as output.websocket.websocket.service2StreamClientImpl #line.dotted;text:gray {
      collections "ws://service-template/{id}/\n\
ws://service-template\n\
ws://service3\n\
ws://defaultURI-static\n\
ws://service-property-injected\n\
ws://currentURI-supplier\n\
ws://currentURI-method\n\
ws://service2-value-inject\n\
ws://service2" as service2StreamClientImpl.interfaces
      service2StreamClientImpl ..( service2StreamClientImpl.interfaces
      service2StreamClientImpl ..( service2StreamClientImpl.interfaces
      service2StreamClientImpl ..( service2StreamClientImpl.interfaces
      service2StreamClientImpl ..( service2StreamClientImpl.interfaces
      service2StreamClientImpl ..( service2StreamClientImpl.interfaces
      service2StreamClientImpl ..( service2StreamClientImpl.interfaces
      service2StreamClientImpl ..( service2StreamClientImpl.interfaces
      service2StreamClientImpl ..( service2StreamClientImpl.interfaces
      service2StreamClientImpl ..( service2StreamClientImpl.interfaces
    }
  }
  queue "jms" as output.jms {
    frame "jmsQueueService" as output.jms.jms.jmsQueueService #line.dotted;text:gray {
      collections "jms-private-queue\n\
jmsQueueEvents\n\
jmsQueueEvents2\n\
jmsQueue" as jmsQueueService.interfaces
      jmsQueueService ..> jmsQueueService.interfaces
      jmsQueueService ..> jmsQueueService.interfaces
      jmsQueueService ..> jmsQueueService.interfaces
      jmsQueueService ..> jmsQueueService.interfaces
      jmsQueueService <.. jmsQueueService.interfaces
    }
  }
}
@enduml
