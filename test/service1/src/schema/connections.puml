@startuml
package "api" as api {
  package "http" as api.http {
    [mainController] as mainController
  }
  package "ws" as api.ws {
    [eventsHandler] as eventsHandler
    [eventsHandler] as eventsHandler
  }
}
package "service" as service {
  [coreService] as coreService
  package "external" as service.external {
    package "jms" as service.external.jms {
      [jmsQueue1Listener] as jmsQueue1Listener
    }
    package "rest" as service.external.rest {
      [service2LegacyImpl] as service2LegacyImpl
      [standaloneService2Api] as standaloneService2Api
      [service2FeignClient] as service2FeignClient
    }
    package "ws" as service.external.ws {
      [service2StreamClientImpl] as service2StreamClientImpl
      [service.stream.client-service1.service.external.ws.Service2StreamClientImpl$Properties] as service.stream.client.service1.service.external.ws.Service2StreamClientImplProperties
    }
  }
}
mainController ..> coreService
coreService ..> service2FeignClient
coreService ..> service2LegacyImpl
coreService ..> standaloneService2Api
jmsQueue1Listener ..> coreService
service2LegacyImpl ..> restTemplate
service2StreamClientImpl ..> webSocketClient
service2StreamClientImpl ..> service.stream.client.service1.service.external.ws.Service2StreamClientImplProperties
service.stream.client.service1.service.external.ws.Service2StreamClientImplProperties ..> org.springframework.boot.context.internalConfigurationPropertiesBinder
service.stream.client.service1.service.external.ws.Service2StreamClientImplProperties ..> org.springframework.boot.context.properties.BoundConfigurationProperties
service.stream.client.service1.service.external.ws.Service2StreamClientImplProperties ..> defaultsBindHandlerAdvisor
rectangle "in" as in {
  cloud "http" as in.http {
    interface "GET:/api/v1/req" as mainController.in.http.GET..api.v1.req
    mainController.in.http.GET..api.v1.req )..> mainController
    interface "*:/api/v1/" as mainController.in.http...api.v1.
    mainController.in.http...api.v1. )..> mainController
  }
  cloud "web socket" as in.websocket {
    interface "/events" as eventsHandler.in.ws..events
    eventsHandler.in.ws..events )..> eventsHandler
  }
  cloud "jms" as in.jms {
    queue "jmsQueue1Listener" as in.jmsQueue1Listener {
      interface "queue1" as jmsQueue1Listener.in.jms.queue1
      jmsQueue1Listener.in.jms.queue1 )..> jmsQueue1Listener
      interface "queue2" as jmsQueue1Listener.in.jms.queue2
      jmsQueue1Listener.in.jms.queue2 )..> jmsQueue1Listener
    }
  }
}
rectangle "out" as out {
  cloud "http" as out.http {
    cloud "standalone-service2" as out.standalone.service2 {
      interface "GET:/{id}" as standaloneService2Api.out.http.GET..id
      standaloneService2Api ..( standaloneService2Api.out.http.GET..id
    }
    cloud "http://service2" as out.http...service2 {
      interface "GET:/{id}" as service2FeignClient.out.http.GET..id
      service2FeignClient ..( service2FeignClient.out.http.GET..id
    }
  }
  cloud "web socket" as out.websocket {
    interface "ws://service2" as service2StreamClientImpl.out.ws.ws...service2
    service2StreamClientImpl ..( service2StreamClientImpl.out.ws.ws...service2
    interface "ws://service3" as service2StreamClientImpl.out.ws.ws...service3
    service2StreamClientImpl ..( service2StreamClientImpl.out.ws.ws...service3
    interface "ws://service2-value-inject" as service2StreamClientImpl.out.ws.ws...service2.value.inject
    service2StreamClientImpl ..( service2StreamClientImpl.out.ws.ws...service2.value.inject
    interface "ws://defaultURI-static" as service2StreamClientImpl.out.ws.ws...defaultURI.static
    service2StreamClientImpl ..( service2StreamClientImpl.out.ws.ws...defaultURI.static
    interface "ws://service-property-injected" as service2StreamClientImpl.out.ws.ws...service.property.injected
    service2StreamClientImpl ..( service2StreamClientImpl.out.ws.ws...service.property.injected
  }
}
@enduml
