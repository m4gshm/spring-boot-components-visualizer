@startuml
together {
  package "api" as api #line.dotted;text:gray {
    package "http" as api.http #line.dotted;text:gray {
      [mainController] as mainController
    }
    package "ws" as api.ws #line.dotted;text:gray {
      [eventsHandler] as eventsHandler
    }
  }
  package "service" as service #line.dotted;text:gray {
    [coreService] as coreService
    package "external" as service.external #line.dotted;text:gray {
      package "jms" as service.external.jms #line.dotted;text:gray {
        [jmsQueueListener] as jmsQueueListener
        [jmsQueueService] as jmsQueueService
      }
      package "rest" as service.external.rest #line.dotted;text:gray {
        [service2LegacyImpl] as service2LegacyImpl
        [standaloneService2Api] as standaloneService2Api
        [service2FeignClient] as service2FeignClient
      }
      package "ws" as service.external.ws #line.dotted;text:gray {
        [service2StreamClientImpl] as service2StreamClientImpl
      }
    }
  }
  package "db" as db #line.dotted;text:gray {
    package "jpa" as db.jpa #line.dotted;text:gray {
      [simpleEntityRepository] as simpleEntityRepository
      [userRepository] as userRepository
    }
    package "mongo" as db.mongo #line.dotted;text:gray {
      [documentRepository] as documentRepository
    }
  }
}
mainController ..> coreService
coreService ..> service2FeignClient
coreService ..> service2LegacyImpl
coreService ..> standaloneService2Api
coreService ..> simpleEntityRepository
coreService ..> documentRepository
jmsQueueListener ..> coreService
database "storage" as storage {
  entity "SimpleEntity" as undefined.storage.service1.db.jpa.model.SimpleEntity
  note right of undefined.storage.service1.db.jpa.model.SimpleEntity: simple_entity
  undefined.storage.service1.db.jpa.model.SimpleEntity .. simpleEntityRepository
  entity "UserEntity" as undefined.storage.service1.db.jpa.model.UserEntity
  note right of undefined.storage.service1.db.jpa.model.UserEntity: auth.user
  undefined.storage.service1.db.jpa.model.UserEntity .. userRepository
  entity "DocumentEntity" as undefined.storage.service1.db.mongo.model.DocumentEntity
  note right of undefined.storage.service1.db.mongo.model.DocumentEntity: documentEntity
  undefined.storage.service1.db.mongo.model.DocumentEntity .. documentRepository
}
cloud "input" as input #line.dotted;line:gray; {
  rectangle "http" as input.http {
    frame "/api/v1" #line.dotted; {
      interface "*:/" as in.http...
      in.http... )..> mainController
      interface "GET:/req" as in.http.GET..req
      in.http.GET..req )..> mainController
    }
  }
  rectangle "web socket" as input.websocket {
    interface "/events" as in.ws..events
    in.ws..events )..> eventsHandler
  }
  queue "jms" as input.jms {
    interface "queue1" as in.jms.queue1
    in.jms.queue1 )..> jmsQueueListener
    interface "queue2" as in.jms.queue2
    in.jms.queue2 )..> jmsQueueListener
    interface "default" as in.jms.default
    in.jms.default )..> jmsQueueService
  }
}
cloud "output" as output #line.dotted;line:gray; {
  rectangle "http" as output.http {
    interface "GET:/{id}" as out.http.GET..id
    standaloneService2Api ..( out.http.GET..id
    service2FeignClient ..( out.http.GET..id
    frame "http://service2" #line.dotted; {
      interface "GET:/" as out.http.GET..
      service2LegacyImpl ..( out.http.GET..
      service2LegacyImpl ..( out.http.GET..id
    }
  }
  rectangle "web socket" as output.websocket {
    interface "ws://service-template" as out.ws.ws...service.template
    service2StreamClientImpl ..( out.ws.ws...service.template
    interface "ws://service-template/{id}/" as out.ws.ws...service.template.id.
    service2StreamClientImpl ..( out.ws.ws...service.template.id.
    interface "ws://service2" as out.ws.ws...service2
    service2StreamClientImpl ..( out.ws.ws...service2
    interface "ws://service3" as out.ws.ws...service3
    service2StreamClientImpl ..( out.ws.ws...service3
    interface "ws://service2-value-inject" as out.ws.ws...service2.value.inject
    service2StreamClientImpl ..( out.ws.ws...service2.value.inject
    interface "ws://defaultURI-static" as out.ws.ws...defaultURI.static
    service2StreamClientImpl ..( out.ws.ws...defaultURI.static
    interface "ws://currentURI-method" as out.ws.ws...currentURI.method
    service2StreamClientImpl ..( out.ws.ws...currentURI.method
    interface "ws://currentURI-supplier" as out.ws.ws...currentURI.supplier
    service2StreamClientImpl ..( out.ws.ws...currentURI.supplier
    interface "ws://service-property-injected" as out.ws.ws...service.property.injected
    service2StreamClientImpl ..( out.ws.ws...service.property.injected
  }
  queue "jms" as output.jms {
    interface "jmsQueue" as outIn.jms.jmsQueue
    jmsQueueService ..> outIn.jms.jmsQueue
    jmsQueueService <.. outIn.jms.jmsQueue
    interface "jmsQueueEvents" as out.jms.jmsQueueEvents
    jmsQueueService ..> out.jms.jmsQueueEvents
    interface "jmsQueueEvents2" as out.jms.jmsQueueEvents2
    jmsQueueService ..> out.jms.jmsQueueEvents2
    interface "jms-private-queue" as out.jms.jms.private.queue
    jmsQueueService ..> out.jms.jms.private.queue
  }
}
@enduml
