@startuml
package "service1" as service1 #line.dotted;text:gray {
  package "api" as service1.api #line.dotted;text:gray {
    package "http" as service1.api.http #line.dotted;text:gray {
      component mainController as mainController
    }
    package "ws" as service1.api.ws #line.dotted;text:gray {
      component eventsHandler as eventsHandler
    }
  }
  package "service" as service1.service #line.dotted;text:gray {
    component coreService as coreService
    package "external" as service1.service.external #line.dotted;text:gray {
      package "jms" as service1.service.external.jms #line.dotted;text:gray {
        component jmsQueueListener as jmsQueueListener
        component jmsQueueService as jmsQueueService
      }
      package "rest" as service1.service.external.rest #line.dotted;text:gray {
        collections "service2LegacyImpl\n\
standaloneService2Api\n\
service2FeignClient" as service1.service.external.rest.components
      }
      package "ws" as service1.service.external.ws #line.dotted;text:gray {
        component service2StreamClientImpl as service2StreamClientImpl
      }
    }
  }
  package "db" as service1.db #line.dotted;text:gray {
    package "jpa" as service1.db.jpa #line.dotted;text:gray {
      component userRepository as userRepository
      component simpleEntityRepository as simpleEntityRepository
    }
    package "mongo" as service1.db.mongo #line.dotted;text:gray {
      component documentRepository as documentRepository
    }
  }
}
mainController ..> coreService
coreService ..> service1.service.external.rest.components
coreService ..> service1.service.external.rest.components
coreService ..> service1.service.external.rest.components
coreService ..> simpleEntityRepository
coreService ..> documentRepository
jmsQueueListener ..> coreService
database "storage" as storage {
  entity "UserEntity" as internal.storage.service1.db.jpa.model.UserEntity
  note right of internal.storage.service1.db.jpa.model.UserEntity: auth.user
  internal.storage.service1.db.jpa.model.UserEntity .. userRepository
  entity "SimpleEntity" as internal.storage.service1.db.jpa.model.SimpleEntity
  note right of internal.storage.service1.db.jpa.model.SimpleEntity: simple_entity
  internal.storage.service1.db.jpa.model.SimpleEntity .. simpleEntityRepository
  entity "DocumentEntity" as internal.storage.service1.db.mongo.model.DocumentEntity
  note right of internal.storage.service1.db.mongo.model.DocumentEntity: documentEntity
  internal.storage.service1.db.mongo.model.DocumentEntity .. documentRepository
}
cloud "input" as input #line.dotted;line:gray; {
  rectangle "http" as input.http {
    frame "/api/v1" #line.dotted; {
      interface "*:/" as in.http...
      in.http... )..> mainController
      interface "GET:/req" as in.http.GET..req
      in.http.GET..req )..> mainController
    }
  }
  rectangle "web socket" as input.websocket {
    interface "/events" as in.ws..events
    in.ws..events )..> eventsHandler
  }
  queue "jms" as input.jms {
    interface "default" as in.jms.default
    in.jms.default )..> jmsQueueService
    rectangle "jmsQueueListener" as input.jms.jms.jmsQueueListener #line.dotted;text:gray {
      interface "queue2" as in.jms.queue2
      in.jms.queue2 )..> jmsQueueListener
      interface "queue1" as in.jms.queue1
      in.jms.queue1 )..> jmsQueueListener
    }
  }
}
cloud "output" as output #line.dotted;line:gray; {
  rectangle "http" as output.http {
    interface "GET:/standalone-service2/{id}" as out.http.GET..standalone.service2.id
    service1.service.external.rest.components ..( out.http.GET..standalone.service2.id
    frame "http://service2" #line.dotted; {
      interface "GET:/" as out.http.GET..
      service1.service.external.rest.components ..( out.http.GET..
      interface "GET:/{id}" as out.http.GET..id
      service1.service.external.rest.components ..( out.http.GET..id
      service1.service.external.rest.components ..( out.http.GET..id
    }
  }
  rectangle "web socket" as output.websocket {
    interface "ws://service-template" as out.ws.ws...service.template
    service2StreamClientImpl ..( out.ws.ws...service.template
    interface "ws://service-template/{id}/" as out.ws.ws...service.template.id.
    service2StreamClientImpl ..( out.ws.ws...service.template.id.
    interface "ws://service2" as out.ws.ws...service2
    service2StreamClientImpl ..( out.ws.ws...service2
    interface "ws://service3" as out.ws.ws...service3
    service2StreamClientImpl ..( out.ws.ws...service3
    interface "ws://service2-value-inject" as out.ws.ws...service2.value.inject
    service2StreamClientImpl ..( out.ws.ws...service2.value.inject
    interface "ws://defaultURI-static" as out.ws.ws...defaultURI.static
    service2StreamClientImpl ..( out.ws.ws...defaultURI.static
    interface "ws://currentURI-method" as out.ws.ws...currentURI.method
    service2StreamClientImpl ..( out.ws.ws...currentURI.method
    interface "ws://currentURI-supplier" as out.ws.ws...currentURI.supplier
    service2StreamClientImpl ..( out.ws.ws...currentURI.supplier
    interface "ws://service-property-injected" as out.ws.ws...service.property.injected
    service2StreamClientImpl ..( out.ws.ws...service.property.injected
  }
  queue "jms" as output.jms {
    rectangle "jmsQueueService" as output.jms.jms.jmsQueueService #line.dotted;text:gray {
      interface "jmsQueueEvents" as out.jms.jmsQueueEvents
      jmsQueueService ..> out.jms.jmsQueueEvents
      interface "jms-private-queue" as out.jms.jms.private.queue
      jmsQueueService ..> out.jms.jms.private.queue
      interface "jmsQueueEvents2" as out.jms.jmsQueueEvents2
      jmsQueueService ..> out.jms.jmsQueueEvents2
      interface "jmsQueue" as outIn.jms.jmsQueue
      jmsQueueService ..> outIn.jms.jmsQueue
      jmsQueueService <.. outIn.jms.jmsQueue
    }
  }
}
@enduml
