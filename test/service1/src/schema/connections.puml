@startuml
package "service1" as service1 #line.dotted;text:gray {
  package "api" as service1.api #line.dotted;text:gray {
    package "http" as service1.api.http #line.dotted;text:gray {
      component mainController as mainController
    }
    package "ws" as service1.api.ws #line.dotted;text:gray {
      component eventsHandler as eventsHandler
    }
  }
  package "service" as service1.service #line.dotted;text:gray {
    component coreService as coreService
    package "external" as service1.service.external #line.dotted;text:gray {
      package "jms" as service1.service.external.jms #line.dotted;text:gray {
        component jmsQueueListener as jmsQueueListener
        component jmsQueueService as jmsQueueService
      }
      package "rest" as service1.service.external.rest #line.dotted;text:gray {
        collections "service2LegacyImpl\n\
standaloneService2Api\n\
service2FeignClient" as service1.service.external.rest.components
      }
      package "ws" as service1.service.external.ws #line.dotted;text:gray {
        component service2StreamClientImpl as service2StreamClientImpl
      }
    }
  }
  package "db" as service1.db #line.dotted;text:gray {
    package "jpa" as service1.db.jpa #line.dotted;text:gray {
      component simpleEntityRepository as simpleEntityRepository
      component userRepository as userRepository
    }
    package "mongo" as service1.db.mongo #line.dotted;text:gray {
      component documentRepository as documentRepository
    }
  }
}
mainController ..> coreService
coreService ..> service1.service.external.rest.components
coreService ..> service1.service.external.rest.components
coreService ..> service1.service.external.rest.components
coreService ..> simpleEntityRepository
coreService ..> documentRepository
jmsQueueListener ..> coreService
cloud "internal" as internal #line.dotted;line:gray; {
  database "storage" as internal.storage {
    entity "SimpleEntity" as internal.jpa.classservice1.db.jpa.model.SimpleEntity..simple_entity.
    note right of internal.jpa.classservice1.db.jpa.model.SimpleEntity..simple_entity.: simple_entity
    internal.jpa.classservice1.db.jpa.model.SimpleEntity..simple_entity. .... simpleEntityRepository
    entity "UserEntity" as internal.jpa.classservice1.db.jpa.model.UserEntity..auth.user.
    note right of internal.jpa.classservice1.db.jpa.model.UserEntity..auth.user.: auth.user
    internal.jpa.classservice1.db.jpa.model.UserEntity..auth.user. .... userRepository
    entity "DocumentEntity" as internal.mongo.classservice1.db.mongo.model.DocumentEntity..documentEntity.
    note right of internal.mongo.classservice1.db.mongo.model.DocumentEntity..documentEntity.: documentEntity
    internal.mongo.classservice1.db.mongo.model.DocumentEntity..documentEntity. .... documentRepository
  }
}
cloud "input" as input #line.dotted;line:gray; {
  rectangle "http" as input.http {
    frame "/api/v1" as input.http..api.v1.group #line.dotted;text:gray {
      interface "*:" as in....api.v1.
      in....api.v1. )....> mainController
      interface "GET:/load" as in.GET..api.v1.load
      in.GET..api.v1.load )....> mainController
      interface "POST:/put" as in.POST..api.v1.put
      in.POST..api.v1.put )....> mainController
    }
  }
  rectangle "web socket" as input.websocket {
    interface "/events" as in.in.ws..events
    in.in.ws..events )....> eventsHandler
  }
  queue "jms" as input.jms {
    interface "default" as in.default.in
    in.default.in )....> jmsQueueService
    frame "jmsQueueListener" as input.jms.jmsQueueListener #line.dotted;text:gray {
      interface "queue1" as in.queue1.in
      in.queue1.in )....> jmsQueueListener
      interface "queue2" as in.queue2.in
      in.queue2.in )....> jmsQueueListener
    }
  }
}
cloud "output" as output #line.dotted;line:gray; {
  rectangle "http" as output.http {
    interface "GET:/standalone-service2" as out.GET.standalone.service2..id.
    service1.service.external.rest.components ....( out.GET.standalone.service2..id.
    frame "http://service2" as output.http.group.http...service2.group #line.dotted;text:gray {
      interface "GET:" as out.GET.http...service2
      service1.service.external.rest.components ....( out.GET.http...service2
      interface "GET:/{id}" as out.GET.http...service2..id.
      service1.service.external.rest.components ....( out.GET.http...service2..id.
    }
  }
  rectangle "web socket" as output.websocket {
    frame "service2StreamClientImpl" as output.websocket.service2StreamClientImpl #line.dotted;text:gray {
      collections "ws://service-template\n\
ws://service-template/{id}/\n\
ws://service2\n\
ws://service3\n\
ws://service2-value-inject\n\
ws://defaultURI-static\n\
ws://currentURI-method\n\
ws://currentURI-supplier\n\
ws://service-property-injected" as service2StreamClientImpl.interfaces
      service2StreamClientImpl ....( service2StreamClientImpl.interfaces
      service2StreamClientImpl ....( service2StreamClientImpl.interfaces
      service2StreamClientImpl ....( service2StreamClientImpl.interfaces
      service2StreamClientImpl ....( service2StreamClientImpl.interfaces
      service2StreamClientImpl ....( service2StreamClientImpl.interfaces
      service2StreamClientImpl ....( service2StreamClientImpl.interfaces
      service2StreamClientImpl ....( service2StreamClientImpl.interfaces
      service2StreamClientImpl ....( service2StreamClientImpl.interfaces
      service2StreamClientImpl ....( service2StreamClientImpl.interfaces
    }
  }
  queue "jms" as output.jms {
    frame "jmsQueueService" as output.jms.jmsQueueService #line.dotted;text:gray {
      interface "jmsQueue" as outIn.jmsQueue.outIn
      jmsQueueService ....> outIn.jmsQueue.outIn
      jmsQueueService <.... outIn.jmsQueue.outIn
      interface "jmsQueueEvents" as out.jmsQueueEvents.out
      jmsQueueService ....> out.jmsQueueEvents.out
      interface "jmsQueueEvents2" as out.jmsQueueEvents2.out
      jmsQueueService ....> out.jmsQueueEvents2.out
      interface "jms-private-queue" as out.jms.private.queue.out
      jmsQueueService ....> out.jms.private.queue.out
    }
  }
}
@enduml
