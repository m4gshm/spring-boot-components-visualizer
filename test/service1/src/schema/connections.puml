@startuml
package "service1" as service1 #line.dotted;text:gray {
  package "api" as service1.api #line.dotted;text:gray {
    package "http" as service1.api.http #line.dotted;text:gray {
      component mainController as mainController
    }
    package "ws" as service1.api.ws #line.dotted;text:gray {
      component eventsHandler as eventsHandler
    }
  }
  package "service" as service1.service #line.dotted;text:gray {
    component coreService as coreService
    package "external" as service1.service.external #line.dotted;text:gray {
      package "jms" as service1.service.external.jms #line.dotted;text:gray {
        component jmsQueueListener as jmsQueueListener
        component jmsQueueService as jmsQueueService
      }
      package "rest" as service1.service.external.rest #line.dotted;text:gray {
        collections "service2LegacyImpl\n\
standaloneService2Api\n\
service2FeignClient" as service1.service.external.rest.components
      }
      package "ws" as service1.service.external.ws #line.dotted;text:gray {
        component service2StreamClientImpl as service2StreamClientImpl
      }
    }
  }
  package "db" as service1.db #line.dotted;text:gray {
    package "jpa" as service1.db.jpa #line.dotted;text:gray {
      component simpleEntityRepository as simpleEntityRepository
      component userRepository as userRepository
    }
    package "mongo" as service1.db.mongo #line.dotted;text:gray {
      component documentRepository as documentRepository
    }
  }
}
mainController ..> coreService
coreService ..> service1.service.external.rest.components
coreService ..> service1.service.external.rest.components
coreService ..> service1.service.external.rest.components
coreService ..> simpleEntityRepository
coreService ..> documentRepository
jmsQueueListener ..> coreService
cloud "internal" as internal #line.dotted;line:gray; {
  database "storage" as internal.storage {
    collections "service1.db.jpa.model.SimpleEntity\n\
service1.db.jpa.model.UserEntity\n\
service1.db.mongo.model.DocumentEntity" as internal.storage.interfaces
    internal.storage.interfaces .. simpleEntityRepository
    internal.storage.interfaces .. userRepository
    internal.storage.interfaces .. documentRepository
  }
}
cloud "input" as input #line.dotted;line:gray; {
  rectangle "http" as input.http {
    frame "/api/v1" #line.dotted;text:gray {
      interface "*:/" as in...api.v1.
      in...api.v1. )..> mainController
      interface "GET:/req" as in.GET..api.v1.req
      in.GET..api.v1.req )..> mainController
    }
  }
  rectangle "web socket" as input.websocket {
    interface "/events" as in
    in )..> eventsHandler
  }
  queue "jms" as input.jms {
    interface "default" as in.default.in
    in.default.in )..> jmsQueueService
    frame "jmsQueueListener" as input.jms.jms.jmsQueueListener #line.dotted;text:gray {
      interface "queue2" as in.queue2.in
      in.queue2.in )..> jmsQueueListener
      interface "queue1" as in.queue1.in
      in.queue1.in )..> jmsQueueListener
    }
  }
}
cloud "output" as output #line.dotted;line:gray; {
  rectangle "http" as output.http {
    interface "GET:/standalone-service2/{id}" as out.GET.standalone.service2.id
    service1.service.external.rest.components ..( out.GET.standalone.service2.id
    frame "http://service2" #line.dotted;text:gray {
      interface "GET:/" as out.GET.http...service2
      service1.service.external.rest.components ..( out.GET.http...service2
      interface "GET:/{id}" as out.GET.http...service2.id
      service1.service.external.rest.components ..( out.GET.http...service2.id
      service1.service.external.rest.components ..( out.GET.http...service2.id
    }
  }
  rectangle "web socket" as output.websocket {
    frame "service2StreamClientImpl" as output.websocket.websocket.service2StreamClientImpl #line.dotted;text:gray {
      collections "ws://currentURI-method\n\
ws://service2\n\
ws://service-property-injected\n\
ws://service3\n\
ws://currentURI-supplier\n\
ws://service-template/{id}/\n\
ws://service-template\n\
ws://service2-value-inject\n\
ws://defaultURI-static" as service2StreamClientImpl.interfaces
      service2StreamClientImpl ..( service2StreamClientImpl.interfaces
      service2StreamClientImpl ..( service2StreamClientImpl.interfaces
      service2StreamClientImpl ..( service2StreamClientImpl.interfaces
      service2StreamClientImpl ..( service2StreamClientImpl.interfaces
      service2StreamClientImpl ..( service2StreamClientImpl.interfaces
      service2StreamClientImpl ..( service2StreamClientImpl.interfaces
      service2StreamClientImpl ..( service2StreamClientImpl.interfaces
      service2StreamClientImpl ..( service2StreamClientImpl.interfaces
      service2StreamClientImpl ..( service2StreamClientImpl.interfaces
    }
  }
  queue "jms" as output.jms {
    frame "jmsQueueService" as output.jms.jms.jmsQueueService #line.dotted;text:gray {
      collections "jms-private-queue\n\
jmsQueueEvents\n\
jmsQueue\n\
jmsQueueEvents2" as jmsQueueService.interfaces
      jmsQueueService ..> jmsQueueService.interfaces
      jmsQueueService ..> jmsQueueService.interfaces
      jmsQueueService ..> jmsQueueService.interfaces
      jmsQueueService <.. jmsQueueService.interfaces
      jmsQueueService ..> jmsQueueService.interfaces
    }
  }
}
@enduml
